{"name":"openjudge","tagline":"LAN hosted programming contest judge.","body":"OpenJudge\r\n=========\r\n[![Build Status](https://travis-ci.org/theSage21/openJudge.svg)](https://travis-ci.org/theSage21/openJudge)\r\n[![Coverage Status](https://coveralls.io/repos/theSage21/openJudge/badge.svg?branch=master&service=github)](https://coveralls.io/github/theSage21/openJudge?branch=master)\r\n[![PyPI](https://badge.fury.io/py/openjudge.svg)](http://badge.fury.io/py/openjudge)\r\n\r\nA judge made to judge the programming competitions held over LAN.\r\nIt requires a web based interface to function.\r\n\r\nLanguage support is unlimited, as long as you can write a shell script for it.\r\nThe interface I use is [judge-interface](https://github.com/theSage21/judge-interface).\r\nThe interface ships with\r\n\r\n- python3\r\n- python2\r\n- gcc\r\n- g++\r\n- java\r\n\r\nWhy?\r\n----\r\n\r\n- Judging programs by hand quickly becomes an experience best forgotten\r\n- Roll-my-own\r\n\r\nSetup\r\n-----\r\n\r\n```\r\ncd ~\r\nmkdir judge\r\ncd judge\r\nvirtualenv -p python3 env\r\nsource env/bin/activate\r\npip install openjudge\r\n```\r\n\r\nIn order to setup the interface one can do the following.\r\n\r\n```\r\ncd ~\r\ngit clone https://github.com/theSage21/judge-interface.git\r\ncd judge-interface\r\n./setup.sh\r\n```\r\n\r\n1. `./setup.sh` does most of the work for you.\r\n2. Set the SLAVE_ADDRESSES in settings.py by default it is set to 127.0.0.1:9000\r\n\r\nThe interface is set up as a standard django server. I prefer using Nginx,Gunicorn as a \r\ncombination. Check my [blog](http://arjoonn.blogspot.com/2015/05/django-gunicorn-and-nginx.html) for how to set that up.\r\n`setup.sh` does this for you.\r\n\r\nNote that the judge will have to run on a linux like machine. I shamelessly used redirection\r\nand I have no idea how they translate on a windows box if they do at all. Besides that, \r\nthe interface can run on another machine and the judge on another.\r\n\r\nUsage during the competition\r\n----------------------------\r\n\r\n1. Run the interface with `./runserver.sh`\r\n2. Register users:\r\n    - Register users with `python add_user.py` using a python shell at the registration desk.\r\n      the file can be found in `judge-interface/webserver/`\r\n    - This can also be done via the Django Admin\r\n3. Run the judge with `openjudge`. As many instances as needed can be initiated. I usually work with 5\r\n3. Tell everyone to navigate to the webserver. It will be something like `192.168.1.45`\r\n4. Enjoy the fruits of watching a hundred people program.\r\n\r\nCommand line options\r\n--------------------\r\n\r\nAll options are available via command line.\r\n\r\n| Option                                                 | Description\r\n|--------------------------------------------------------|---------------------------------------------------\r\n| `-v`, `--version`                                      | Show version info and exit\r\n| `-h`, `--help`                                         | Show this help message and exit\r\n| `-ll`, `--log-level`                                   | Logging level. Integer value accepted\r\n| `-t`, `--timeout`                                      | The time in seconds to wait before declaring code to be timed out.\r\n|`-d`, `--check-data-folder`                             | Path to the folder which must be used for data storage\r\n| `-w`, `--web-server`                                   | Address of webserver. example 192.168.1.15:80\r\n| `-u`, `--detail-url`                                   | URL where details of question and languages may be found\r\n| `-b`, `--bind`                                         | Address where the slave must listen. example ('127.0.0.1', 9000)\r\n| `-j`, `--job-list-prefix`                              | The prefix string used to store job list files\r\n| `-p`, `--protocol`                                     | The protocol used by the webserver. example https://\r\n| `-l`, `--log-file`                                     | The name of the log file to use for logging purposes\r\n\r\n\r\nInvoke via `openjudge --help`\r\n\r\nGotchas\r\n-------\r\nSome features are not available. If you want you can implement them yourself.\r\n\r\n- No sandboxing.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}